definitions:
  courier.NotificationCreateReq:
    properties:
      message:
        type: string
      user_id:
        type: string
    type: object
  courier.NotificationGetAllRes:
    properties:
      notifications:
        items:
          $ref: '#/definitions/courier.NotificationRes'
        type: array
    type: object
  courier.NotificationGetByIdRes:
    properties:
      notification:
        $ref: '#/definitions/courier.NotificationRes'
    type: object
  courier.NotificationRes:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_read:
        type: string
      message:
        type: string
      user_id:
        type: string
    type: object
  courier.TaskCreateReq:
    properties:
      assigned_to:
        type: string
      description:
        type: string
      due_date:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  courier.TaskGetAllRes:
    properties:
      tasks:
        items:
          $ref: '#/definitions/courier.TaskRes'
        type: array
    type: object
  courier.TaskGetByIdRes:
    properties:
      task:
        $ref: '#/definitions/courier.TaskRes'
    type: object
  courier.TaskRes:
    properties:
      assigned_to:
        type: string
      description:
        type: string
      due_date:
        type: string
      id:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  order.CartGetAllRes:
    properties:
      carts:
        items:
          $ref: '#/definitions/order.CartRes'
        type: array
    type: object
  order.CartGetByIdRes:
    properties:
      cart:
        $ref: '#/definitions/order.CartRes'
    type: object
  order.CartItemCreateReq:
    properties:
      cart_id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      user_id:
        type: string
    type: object
  order.CartItemGetAllRes:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/order.CartItemRes'
        type: array
    type: object
  order.CartItemGetByIdRes:
    properties:
      cart_item:
        $ref: '#/definitions/order.CartItemRes'
    type: object
  order.CartItemRes:
    properties:
      cart_id:
        type: string
      id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      user_id:
        type: string
    type: object
  order.CartRes:
    properties:
      id:
        type: string
      total_amount:
        type: integer
      user_id:
        type: string
    type: object
  order.ProductCreateReq:
    properties:
      description:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: integer
    type: object
  order.ProductGetAllRes:
    properties:
      products:
        items:
          $ref: '#/definitions/order.ProductRes'
        type: array
    type: object
  order.ProductGetByIdRes:
    properties:
      product:
        $ref: '#/definitions/order.ProductRes'
    type: object
  order.ProductRes:
    properties:
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: integer
    type: object
info:
  contact: {}
paths:
  /cart:
    post:
      consumes:
      - application/json
      description: Create a new cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart created
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create cart
      tags:
      - cart
  /cart/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a cart by ID
      produces:
      - application/json
      responses:
        "200":
          description: Cart deleted
          schema:
            type: string
        "400":
          description: Invalid event ID
          schema:
            type: string
        "404":
          description: Cart not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete cart
      tags:
      - cart
    get:
      consumes:
      - application/json
      description: Get a cart
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.CartGetByIdRes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Update an existing cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart updated
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Cart not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update cart
      tags:
      - cart
  /cart/all:
    get:
      consumes:
      - application/json
      description: Get all carts
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.CartGetAllRes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all carts
      tags:
      - cart
  /cart_item:
    post:
      consumes:
      - application/json
      description: Create a new cart
      parameters:
      - description: Cart data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/order.CartItemCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Cart item created
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create cart
      tags:
      - cart item
  /cart_item/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a cart by ID
      parameters:
      - description: Cart ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart deleted
          schema:
            type: string
        "400":
          description: Invalid event ID
          schema:
            type: string
        "404":
          description: Cart not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete cart
      tags:
      - cart item
    get:
      consumes:
      - application/json
      description: Get a cart
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.CartItemGetByIdRes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get cart
      tags:
      - cart item
    put:
      consumes:
      - application/json
      description: Update an existing cart
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      - description: Quantity
        in: query
        name: quantity
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Cart updated
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Cart not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update cart
      tags:
      - cart item
  /cart_item/all:
    get:
      consumes:
      - application/json
      description: Get all carts
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.CartItemGetAllRes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all carts
      tags:
      - cart item
  /notification:
    post:
      consumes:
      - application/json
      description: Create a new notification
      parameters:
      - description: Notification data
        in: body
        name: memory
        required: true
        schema:
          $ref: '#/definitions/courier.NotificationCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Notification created
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create notification
      tags:
      - notification
  /notification/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a notification by ID
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notification deleted
          schema:
            type: string
        "400":
          description: Invalid notification ID
          schema:
            type: string
        "404":
          description: Notification not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete notification
      tags:
      - notification
    get:
      consumes:
      - application/json
      description: Get a notification
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courier.NotificationGetByIdRes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get notification
      tags:
      - notification
    put:
      consumes:
      - application/json
      description: Update an existing notification
      parameters:
      - description: Id
        in: query
        name: id
        type: string
      - description: IsRead
        in: query
        name: is_read
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notification updated
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Notification not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update notification
      tags:
      - notification
  /notification/all:
    get:
      consumes:
      - application/json
      description: Get all notification
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courier.NotificationGetAllRes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all notification
      tags:
      - notification
  /product:
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/order.ProductCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Product created
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create product
      tags:
      - product
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted
          schema:
            type: string
        "400":
          description: Invalid product ID
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - product
    get:
      consumes:
      - application/json
      description: Get a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.ProductGetByIdRes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get product
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Id
        in: query
        name: id
        type: string
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/order.ProductCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - product
  /product/all:
    get:
      consumes:
      - application/json
      description: Get all product
      parameters:
      - description: Name
        in: query
        name: name
        type: integer
      - description: Price
        in: query
        name: price
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.ProductGetAllRes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all product
      tags:
      - product
  /task:
    post:
      consumes:
      - application/json
      description: Create a new task
      parameters:
      - description: Task data
        in: body
        name: media
        required: true
        schema:
          $ref: '#/definitions/courier.TaskCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Task created
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create task
      tags:
      - task
  /task/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted
          schema:
            type: string
        "400":
          description: Invalid media ID
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete task
      tags:
      - task
    get:
      consumes:
      - application/json
      description: Get a task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courier.TaskGetByIdRes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get task
      tags:
      - task
    put:
      consumes:
      - application/json
      description: Update an existing task
      parameters:
      - description: Id
        in: query
        name: id
        type: string
      - description: Status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task updated
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Task not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update task
      tags:
      - task
  /task/all:
    get:
      consumes:
      - application/json
      description: Get all tasks
      parameters:
      - description: Status
        in: query
        name: status
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courier.TaskGetAllRes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all tasks
      tags:
      - task
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

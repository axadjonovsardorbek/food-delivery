// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: courier_location.proto

package courier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CourierLocationService_Create_FullMethodName  = "/courier.CourierLocationService/Create"
	CourierLocationService_GetById_FullMethodName = "/courier.CourierLocationService/GetById"
	CourierLocationService_GetAll_FullMethodName  = "/courier.CourierLocationService/GetAll"
	CourierLocationService_Update_FullMethodName  = "/courier.CourierLocationService/Update"
	CourierLocationService_Delete_FullMethodName  = "/courier.CourierLocationService/Delete"
)

// CourierLocationServiceClient is the client API for CourierLocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierLocationServiceClient interface {
	Create(ctx context.Context, in *LocationCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*LocationGetByIdRes, error)
	GetAll(ctx context.Context, in *LocationGetAllReq, opts ...grpc.CallOption) (*LocationGetAllRes, error)
	Update(ctx context.Context, in *LocationUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type courierLocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierLocationServiceClient(cc grpc.ClientConnInterface) CourierLocationServiceClient {
	return &courierLocationServiceClient{cc}
}

func (c *courierLocationServiceClient) Create(ctx context.Context, in *LocationCreateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CourierLocationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierLocationServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*LocationGetByIdRes, error) {
	out := new(LocationGetByIdRes)
	err := c.cc.Invoke(ctx, CourierLocationService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierLocationServiceClient) GetAll(ctx context.Context, in *LocationGetAllReq, opts ...grpc.CallOption) (*LocationGetAllRes, error) {
	out := new(LocationGetAllRes)
	err := c.cc.Invoke(ctx, CourierLocationService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierLocationServiceClient) Update(ctx context.Context, in *LocationUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CourierLocationService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierLocationServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CourierLocationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierLocationServiceServer is the server API for CourierLocationService service.
// All implementations must embed UnimplementedCourierLocationServiceServer
// for forward compatibility
type CourierLocationServiceServer interface {
	Create(context.Context, *LocationCreateReq) (*Void, error)
	GetById(context.Context, *ById) (*LocationGetByIdRes, error)
	GetAll(context.Context, *LocationGetAllReq) (*LocationGetAllRes, error)
	Update(context.Context, *LocationUpdateReq) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedCourierLocationServiceServer()
}

// UnimplementedCourierLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourierLocationServiceServer struct {
}

func (UnimplementedCourierLocationServiceServer) Create(context.Context, *LocationCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCourierLocationServiceServer) GetById(context.Context, *ById) (*LocationGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCourierLocationServiceServer) GetAll(context.Context, *LocationGetAllReq) (*LocationGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCourierLocationServiceServer) Update(context.Context, *LocationUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCourierLocationServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCourierLocationServiceServer) mustEmbedUnimplementedCourierLocationServiceServer() {
}

// UnsafeCourierLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierLocationServiceServer will
// result in compilation errors.
type UnsafeCourierLocationServiceServer interface {
	mustEmbedUnimplementedCourierLocationServiceServer()
}

func RegisterCourierLocationServiceServer(s grpc.ServiceRegistrar, srv CourierLocationServiceServer) {
	s.RegisterService(&CourierLocationService_ServiceDesc, srv)
}

func _CourierLocationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).Create(ctx, req.(*LocationCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierLocationService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierLocationService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).GetAll(ctx, req.(*LocationGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierLocationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).Update(ctx, req.(*LocationUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierLocationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// CourierLocationService_ServiceDesc is the grpc.ServiceDesc for CourierLocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourierLocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "courier.CourierLocationService",
	HandlerType: (*CourierLocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CourierLocationService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CourierLocationService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CourierLocationService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CourierLocationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CourierLocationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courier_location.proto",
}

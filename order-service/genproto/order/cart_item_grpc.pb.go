// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: cart_item.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CartItemService_Create_FullMethodName         = "/order.CartItemService/Create"
	CartItemService_GetById_FullMethodName        = "/order.CartItemService/GetById"
	CartItemService_GetAll_FullMethodName         = "/order.CartItemService/GetAll"
	CartItemService_Update_FullMethodName         = "/order.CartItemService/Update"
	CartItemService_Delete_FullMethodName         = "/order.CartItemService/Delete"
	CartItemService_GetTotalAmount_FullMethodName = "/order.CartItemService/GetTotalAmount"
	CartItemService_GetCartId_FullMethodName      = "/order.CartItemService/GetCartId"
)

// CartItemServiceClient is the client API for CartItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartItemServiceClient interface {
	Create(ctx context.Context, in *CartItemCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*CartItemGetByIdRes, error)
	GetAll(ctx context.Context, in *CartItemGetAllReq, opts ...grpc.CallOption) (*CartItemGetAllRes, error)
	Update(ctx context.Context, in *CartItemUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetTotalAmount(ctx context.Context, in *GetTotalAmountReq, opts ...grpc.CallOption) (*GetTotalAmountRes, error)
	GetCartId(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ById, error)
}

type cartItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartItemServiceClient(cc grpc.ClientConnInterface) CartItemServiceClient {
	return &cartItemServiceClient{cc}
}

func (c *cartItemServiceClient) Create(ctx context.Context, in *CartItemCreateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CartItemService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*CartItemGetByIdRes, error) {
	out := new(CartItemGetByIdRes)
	err := c.cc.Invoke(ctx, CartItemService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) GetAll(ctx context.Context, in *CartItemGetAllReq, opts ...grpc.CallOption) (*CartItemGetAllRes, error) {
	out := new(CartItemGetAllRes)
	err := c.cc.Invoke(ctx, CartItemService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) Update(ctx context.Context, in *CartItemUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CartItemService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, CartItemService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) GetTotalAmount(ctx context.Context, in *GetTotalAmountReq, opts ...grpc.CallOption) (*GetTotalAmountRes, error) {
	out := new(GetTotalAmountRes)
	err := c.cc.Invoke(ctx, CartItemService_GetTotalAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartItemServiceClient) GetCartId(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ById, error) {
	out := new(ById)
	err := c.cc.Invoke(ctx, CartItemService_GetCartId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartItemServiceServer is the server API for CartItemService service.
// All implementations must embed UnimplementedCartItemServiceServer
// for forward compatibility
type CartItemServiceServer interface {
	Create(context.Context, *CartItemCreateReq) (*Void, error)
	GetById(context.Context, *ById) (*CartItemGetByIdRes, error)
	GetAll(context.Context, *CartItemGetAllReq) (*CartItemGetAllRes, error)
	Update(context.Context, *CartItemUpdateReq) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	GetTotalAmount(context.Context, *GetTotalAmountReq) (*GetTotalAmountRes, error)
	GetCartId(context.Context, *ById) (*ById, error)
	mustEmbedUnimplementedCartItemServiceServer()
}

// UnimplementedCartItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartItemServiceServer struct {
}

func (UnimplementedCartItemServiceServer) Create(context.Context, *CartItemCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCartItemServiceServer) GetById(context.Context, *ById) (*CartItemGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCartItemServiceServer) GetAll(context.Context, *CartItemGetAllReq) (*CartItemGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCartItemServiceServer) Update(context.Context, *CartItemUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCartItemServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCartItemServiceServer) GetTotalAmount(context.Context, *GetTotalAmountReq) (*GetTotalAmountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalAmount not implemented")
}
func (UnimplementedCartItemServiceServer) GetCartId(context.Context, *ById) (*ById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartId not implemented")
}
func (UnimplementedCartItemServiceServer) mustEmbedUnimplementedCartItemServiceServer() {}

// UnsafeCartItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartItemServiceServer will
// result in compilation errors.
type UnsafeCartItemServiceServer interface {
	mustEmbedUnimplementedCartItemServiceServer()
}

func RegisterCartItemServiceServer(s grpc.ServiceRegistrar, srv CartItemServiceServer) {
	s.RegisterService(&CartItemService_ServiceDesc, srv)
}

func _CartItemService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).Create(ctx, req.(*CartItemCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).GetAll(ctx, req.(*CartItemGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItemUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).Update(ctx, req.(*CartItemUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_GetTotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).GetTotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_GetTotalAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).GetTotalAmount(ctx, req.(*GetTotalAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartItemService_GetCartId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartItemServiceServer).GetCartId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartItemService_GetCartId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartItemServiceServer).GetCartId(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// CartItemService_ServiceDesc is the grpc.ServiceDesc for CartItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.CartItemService",
	HandlerType: (*CartItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CartItemService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CartItemService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CartItemService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CartItemService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CartItemService_Delete_Handler,
		},
		{
			MethodName: "GetTotalAmount",
			Handler:    _CartItemService_GetTotalAmount_Handler,
		},
		{
			MethodName: "GetCartId",
			Handler:    _CartItemService_GetCartId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart_item.proto",
}
